{"version":3,"sources":["useCsvParser.ts","PlayerProfile.tsx","Data.tsx","App.tsx","useLocationUpdater.ts","serviceWorker.ts","index.tsx"],"names":["corsProxy","extraPointMap","roads","merchant","handleUnrecognizedInput","input","alert","Error","parseBase","baseString","cities","Number","exec","settlements","parseDevelopment","trade","politics","science","parseExtraPoints","split","reduce","acc","item","name","defenderPoints","score","getExtraPointData","total","items","handlePlayerField","fieldName","values","playerData","filter","map","trim","data","i","base","development","extraPoints","order","join","getGameStats","games","targetPlayer","game","playerPosition","players","findIndex","extra","defender","victoryPolitics","victoryScience","metropolisTrade","metropolisPolitics","metropolisScience","PlayerProfile","player","playerGames","wonGames","gameStats","playerAverages","length","Card","elevation","CardContent","Box","display","alignItems","justifyContent","Typography","variant","icon","faDice","component","ml","mb","Tooltip","placement","title","align","flex","toFixed","gameRecency","maxTime","color","faLaugh","faSmile","faMeh","faFrown","faSadCry","placeNames","Data","lastGame","firstGame","lastGameDate","Date","date","firstGameDate","timePastSinceLastGame","now","gameRecencyItem","find","stage","useState","displayRange","setDisplayRange","allPlayers","Set","flatMap","blacklistedPlayers","setBlacklistedPlayers","requiredGameStats","setRequiredGameStats","dateFilteredGames","playerFilteredGames","some","includes","gamesMissingStats","undefined","gameNo","missingFields","push","filteredGames","field","shownGamesMissingStats","dateAvailablePlayers","forEach","index","place","totalGames","totalScore","totalWins","places","first","second","third","fourth","placeName","useEffect","minGames","playersBelowMinGameCount","Object","playersWithOrder","orderPositionName","position","orderPositions","Container","my","Grid","container","spacing","xs","faClock","format","style","formatDistanceToNow","addSuffix","faUsers","py","px","mx","top","zIndex","backgroundColor","startText","endText","label","value","disableFuture","disableHighlightToday","reduceAnimations","minDate","maxDate","onChange","renderInput","startProps","endProps","Fragment","TextField","size","helperText","FormControlLabel","control","Switch","checked","requiredStats","stat","pl","visibility","faExclamationTriangle","colors","deepOrange","isBlacklisted","Chip","margin","key","onClick","sm","mt","maxHeight","height","id","hasWon","newAvg","y","x","right","bottom","left","scheme","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","lineWidth","pointSize","pointBorderWidth","useMesh","enableCrosshair","yFormat","Math","round","tooltip","gameData","String","point","Paper","p","alignContent","legends","anchor","direction","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","effects","on","sliceLabel","innerRadius","padAngle","radialLabelsLinkColor","from","modifiers","radialLabelsLinkStrokeWidth","radialLabelsLinkOffset","slicesLabelsSkipAngle","radialLabelsSkipAngle","slice","keys","indexBy","dataFrom","justify","itemsSpacing","itemDirection","itemOpacity","animate","motionStiffness","motionDamping","playerScore","yScale","type","max","min","App","fileQuery","URLSearchParams","window","location","search","get","fileUrl","setFileUrl","console","time","parsedData","setParsedData","isLoading","setIsLoading","error","setError","a","Promise","resolve","reject","parse","download","worker","complete","response","dataRows","log","row","currentGame","parseFileFromUrl","invalidScores","expectedScore","useCsvParser","timeEnd","url","URL","href","searchParams","set","delete","history","replaceState","useLocationUpdater","pt","textAlign","flexDirection","maxWidth","width","toString","fullWidth","event","target","InputProps","endAdornment","InputAdornment","CircularProgress","Boolean","hostname","match","ReactDOM","render","StrictMode","LocalizationProvider","dateAdapter","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80f9ce6c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { parse, ParseResult } from \"papaparse\";\n\n// const corsProxy = \"https://cors-anywhere.herokuapp.com/\";\nconst corsProxy = \"https://pure-journey-53329.herokuapp.com/cors?q=\";\n\nconst extraPointMap = {\n  roads: 2,\n  merchant: 1,\n};\n\ntype ExtraPointItem =\n  | \"merchant\"\n  | \"roads\"\n  | \"defender\"\n  | \"victoryPolitics\"\n  | \"victoryScience\"\n  | \"metropolisTrade\"\n  | \"metropolisPolitics\"\n  | \"metropolisScience\";\n\ntype ExtraPoints = {\n  total: number;\n  items: Partial<Record<ExtraPointItem, number>>;\n};\n\nexport type GamePlayerData = {\n  name: string;\n  score: number;\n  base?: ReturnType<typeof parseBase>;\n  development?: ReturnType<typeof parseDevelopment>;\n  extraPoints?: ReturnType<typeof parseExtraPoints>;\n  order?: number;\n};\n\nexport type GameData = {\n  gameNo: string;\n  date: string;\n  players: GamePlayerData[];\n};\n\nfunction handleUnrecognizedInput(input: string) {\n  alert(\"Unrecognized field\");\n\n  return new Error(`Bad field: ${input}`);\n}\n\nfunction parseBase(baseString: string) {\n  const cities = Number(/(\\d+)c/.exec(baseString)?.[1]) || 0;\n  const settlements = Number(/(\\d+)s/.exec(baseString)?.[1]) || 0;\n\n  return { cities, settlements };\n}\n\nfunction parseDevelopment(baseString: string) {\n  const trade = Number(/(\\d+)y/.exec(baseString)?.[1]) || 0;\n  const politics = Number(/(\\d+)b/.exec(baseString)?.[1]) || 0;\n  const science = Number(/(\\d+)g/.exec(baseString)?.[1]) || 0;\n\n  return { trade, politics, science };\n}\n\nfunction getExtraPointData(\n  name: string\n): { score: number; name: ExtraPointItem } {\n  const defenderPoints = /^(\\d)+d/.exec(name);\n  if (defenderPoints) return { score: +defenderPoints[1], name: \"defender\" };\n\n  switch (name) {\n    case \"my\":\n      return { score: 2, name: \"metropolisTrade\" };\n    case \"mb\":\n      return { score: 2, name: \"metropolisPolitics\" };\n    case \"mg\":\n      return { score: 2, name: \"metropolisScience\" };\n    case \"vb\":\n      return { score: 1, name: \"victoryPolitics\" };\n    case \"vg\":\n      return { score: 1, name: \"victoryScience\" };\n    default: {\n      if (name !== \"roads\" && name !== \"merchant\")\n        throw handleUnrecognizedInput(name);\n\n      const score = extraPointMap[name];\n\n      if (!score) throw handleUnrecognizedInput(name);\n\n      return {\n        name,\n        score,\n      };\n    }\n  }\n}\n\nfunction parseExtraPoints(baseString: string) {\n  return baseString.split(\", \").reduce(\n    (acc: ExtraPoints, item) => {\n      if (!item) return acc;\n\n      const { name, score } = getExtraPointData(item);\n      acc.total += score;\n      acc.items[name] = acc.items[name] || 0 + score;\n\n      return acc;\n    },\n    { total: 0, items: {} }\n  );\n}\nfunction handlePlayerField(\n  fieldName: string,\n  values: string[],\n  playerData: any[]\n) {\n  switch (fieldName) {\n    case \"Player\":\n      return values\n        .filter((name) => !!name)\n        .map((name) => ({ name: name.trim() }));\n    case \"Score\":\n      return playerData.map((data, i) => ({ ...data, score: +values[i] }));\n    case \"Base\":\n      return playerData.map((data, i) => ({\n        ...data,\n        base: parseBase(values[i]),\n      }));\n    case \"Development\":\n      return playerData.map((data, i) => ({\n        ...data,\n        development: parseDevelopment(values[i]),\n      }));\n    case \"Extra points\":\n      return playerData.map((data, i) => ({\n        ...data,\n        extraPoints: parseExtraPoints(values[i]),\n      }));\n    case \"Start order\":\n      return playerData.map((data, i) => ({ ...data, order: +values[i] }));\n    default:\n      throw handleUnrecognizedInput(`${fieldName}:${values.join(\", \")}`);\n  }\n}\n\nexport const useCsvParser = (fileUrl: string) => {\n  const [parsedData, setParsedData] = useState<GameData[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (!fileUrl) return;\n\n    async function parseFileFromUrl() {\n      setIsLoading(true);\n      try {\n        const response = await new Promise<ParseResult<string[]>>(\n          (resolve, reject) =>\n            parse(corsProxy + fileUrl, {\n              download: true,\n              worker: true,\n              complete: resolve,\n              error: reject,\n            })\n        );\n\n        // Skip first 2 rows with meta data\n        const dataRows = response.data.slice(2);\n\n        console.log(\"data\", dataRows);\n        const { data } = dataRows.reduce(\n          (\n            acc: { currentGame: GameData | null; data: GameData[] },\n            row: string[],\n            index\n          ) => {\n            const [gameNo, date, field, ...players] = row.slice(0, 7);\n            if (gameNo) {\n              if (acc.currentGame) acc.data.push(acc.currentGame);\n\n              acc.currentGame = {\n                gameNo,\n                date,\n                players: [],\n              };\n            }\n\n            if (!acc.currentGame) throw handleUnrecognizedInput(row.join(\", \"));\n\n            acc.currentGame.players = handlePlayerField(\n              field,\n              players,\n              acc.currentGame.players\n            );\n            if (index === dataRows.length - 1) acc.data.push(acc.currentGame);\n\n            return acc;\n          },\n          { currentGame: null, data: [] }\n        );\n        setParsedData(data);\n      } catch (error) {\n        setError(error);\n      }\n      setIsLoading(false);\n    }\n\n    parseFileFromUrl();\n  }, [fileUrl]);\n\n  const invalidScores = parsedData\n    ?.map(({ players, gameNo }) =>\n      players.map((player) => {\n        if (!player.extraPoints && !player.base) return {};\n\n        const extrapointScore = player.extraPoints?.total || 0;\n        const baseScore =\n          (player.base?.cities || 0) * 2 + (player.base?.settlements || 0);\n        const expectedScore = extrapointScore + baseScore;\n\n        return {\n          gameNo,\n          name: player.name,\n          score: player.score,\n          development: player.development,\n          expectedScore: expectedScore,\n        };\n      })\n    )\n    .filter((players) =>\n      players.some(({ expectedScore, score }) => score !== expectedScore)\n    );\n  console.log(\"scores\", invalidScores);\n  return { data: parsedData, isLoading, error };\n};\n","import { faDice } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, Card, CardContent, Typography, Tooltip } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport { PlayerData } from \"./Data\";\nimport { GameData } from \"./useCsvParser\";\n\nconst getGameStats = (games: GameData[], targetPlayer?: string) =>\n  games.reduce(\n    (acc, game) => {\n      const playerPosition = targetPlayer\n        ? game.players.findIndex(({ name }) => name === targetPlayer)\n        : 0;\n      const playerData = game.players[playerPosition];\n\n      acc.development.trade += playerData.development?.trade ?? 0;\n      acc.development.politics += playerData.development?.politics ?? 0;\n      acc.development.science += playerData.development?.science ?? 0;\n\n      acc.base.cities += playerData.base?.cities ?? 0;\n      acc.base.settlements += playerData.base?.settlements ?? 0;\n\n      acc.extra.roads += (playerData.extraPoints?.items.roads ?? 0) / 2;\n      acc.extra.merchant += playerData.extraPoints?.items.merchant ?? 0;\n      acc.extra.defender += playerData.extraPoints?.items.defender ?? 0;\n      acc.extra.victoryPolitics +=\n        playerData.extraPoints?.items.victoryPolitics ?? 0;\n      acc.extra.victoryScience +=\n        playerData.extraPoints?.items.victoryScience ?? 0;\n      acc.extra.metropolisTrade +=\n        (playerData.extraPoints?.items.metropolisTrade ?? 0) / 2;\n      acc.extra.metropolisPolitics +=\n        (playerData.extraPoints?.items.metropolisPolitics ?? 0) / 2;\n      acc.extra.metropolisScience +=\n        (playerData.extraPoints?.items.metropolisScience ?? 0) / 2;\n\n      if (typeof playerData.order === \"number\") {\n        acc.order[playerData.order - 1]++;\n      }\n\n      return acc;\n    },\n    {\n      development: {\n        trade: 0,\n        politics: 0,\n        science: 0,\n      },\n      base: {\n        cities: 0,\n        settlements: 0,\n      },\n      extra: {\n        merchant: 0,\n        roads: 0,\n        defender: 0,\n        victoryPolitics: 0,\n        victoryScience: 0,\n        metropolisTrade: 0,\n        metropolisPolitics: 0,\n        metropolisScience: 0,\n      },\n      order: [0, 0, 0, 0],\n    }\n  );\nfunction PlayerProfile({\n  player,\n  playerGames,\n}: {\n  player?: PlayerData;\n  playerGames: GameData[];\n}) {\n  const games = playerGames.filter(\n    ({ players }) => !!players[0].base && !!players[0].development\n  );\n  const wonGames = games.filter(\n    ({ players }) => players[0].name === player?.name\n  );\n\n  const gameStats = getGameStats(games, player?.name);\n  const winStats = getGameStats(wonGames, player?.name);\n\n  const playerAverages = {\n    development: {\n      trade: gameStats.development.trade / games.length,\n      science: gameStats.development.science / games.length,\n      politics: gameStats.development.politics / games.length,\n    },\n    base: {\n      cities: gameStats.base.cities / games.length,\n      settlements: gameStats.base.settlements / games.length,\n    },\n    extra: {\n      merchant: gameStats.extra.merchant / games.length,\n      roads: gameStats.extra.roads / games.length,\n      defender: gameStats.extra.defender / games.length,\n      victoryPolitics: gameStats.extra.victoryPolitics / games.length,\n      victoryScience: gameStats.extra.victoryScience / games.length,\n      metropolisTrade: gameStats.extra.metropolisTrade / games.length,\n      metropolisPolitics: gameStats.extra.metropolisPolitics / games.length,\n      metropolisScience: gameStats.extra.metropolisScience / games.length,\n    },\n    // winStats: {\n    //   order: playerStats.winStats.order.reduce(\n    //     (acc: null | { order: number; wins: number }, wins, i) =>\n    //       wins > (acc?.wins || 0) ? { order: i + 1, wins } : acc,\n    //     null\n    //   ),\n    //   development: {\n    //     trade:\n    //       playerStats.winStats.development.trade /\n    //       playerStats.winStats.gameCount,\n    //     science:\n    //       playerStats.winStats.development.science /\n    //       playerStats.winStats.gameCount,\n    //     politics:\n    //       playerStats.winStats.development.politics /\n    //       playerStats.winStats.gameCount,\n    //   },\n    //   base: {\n    //     cities:\n    //       playerStats.winStats.base.cities / playerStats.winStats.gameCount,\n    //     settlements:\n    //       playerStats.winStats.base.settlements /\n    //       playerStats.winStats.gameCount,\n    //   },\n    // },\n  };\n\n  return (\n    <Card elevation={2}>\n      <CardContent>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h5\">{player?.name || \"General\"}</Typography>\n          <Typography variant=\"h6\">\n            <FontAwesomeIcon icon={faDice} />\n            <Box component=\"span\" ml={1}>\n              {player?.games.length}\n            </Box>\n          </Typography>\n        </Box>\n\n        <Box mb={2}>\n          <Tooltip\n            placement=\"top-start\"\n            title=\"Average commodity level reached per game\"\n          >\n            <Typography align=\"left\" variant=\"subtitle1\">\n              Commodities\n            </Typography>\n          </Tooltip>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Science</Typography>\n              <Typography variant=\"subtitle2\">\n                {playerAverages.development.science.toFixed(2)}\n              </Typography>\n            </Box>\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Trade</Typography>\n              <Typography variant=\"subtitle2\">\n                {playerAverages.development.trade.toFixed(2)}\n              </Typography>\n            </Box>\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Politics</Typography>\n              <Typography variant=\"subtitle2\">\n                {playerAverages.development.politics.toFixed(2)}\n              </Typography>\n            </Box>\n          </Box>\n        </Box>\n\n        <Box mb={2}>\n          <Tooltip\n            placement=\"top-start\"\n            title=\"Percentage of games where finished with the metropoly\"\n          >\n            <Typography align=\"left\" variant=\"subtitle1\">\n              Metropolies\n            </Typography>\n          </Tooltip>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Science</Typography>\n              <Typography variant=\"subtitle2\">\n                {(playerAverages.extra.metropolisScience * 100).toFixed(2)}%\n              </Typography>\n            </Box>\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Trade</Typography>\n              <Typography variant=\"subtitle2\">\n                {(playerAverages.extra.metropolisTrade * 100).toFixed(2)}%\n              </Typography>\n            </Box>\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Politics</Typography>\n              <Typography variant=\"subtitle2\">\n                {(playerAverages.extra.metropolisPolitics * 100).toFixed(2)}%\n              </Typography>\n            </Box>\n          </Box>\n        </Box>\n\n        <Box mb={2}>\n          <Tooltip\n            placement=\"top-start\"\n            title=\"Average count of buildings per game\"\n          >\n            <Typography align=\"left\" variant=\"subtitle1\">\n              Buildings\n            </Typography>\n          </Tooltip>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Settlements</Typography>\n              <Typography variant=\"subtitle2\">\n                {playerAverages.base.settlements.toFixed(2)}\n              </Typography>\n            </Box>\n            <Box flex=\"1\" />\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Cities</Typography>\n              <Typography variant=\"subtitle2\">\n                {playerAverages.base.cities.toFixed(2)}\n              </Typography>\n            </Box>\n          </Box>\n        </Box>\n\n        <Box mb={2}>\n          <Tooltip\n            placement=\"top-start\"\n            title=\"Percentage of games where owned the corresponding item. Except for defender, which represents average owned card count per game\"\n          >\n            <Typography align=\"left\" variant=\"subtitle1\">\n              Extra\n            </Typography>\n          </Tooltip>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Roads</Typography>\n              <Typography variant=\"subtitle2\">\n                {(playerAverages.extra.roads * 100).toFixed(2)}%\n              </Typography>\n            </Box>\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Merchant</Typography>\n              <Typography variant=\"subtitle2\">\n                {(playerAverages.extra.merchant * 100).toFixed(2)}%\n              </Typography>\n            </Box>\n            <Box flex=\"1\">\n              <Typography variant=\"caption\">Defender</Typography>\n              <Typography variant=\"subtitle2\">\n                {playerAverages.extra.defender.toFixed(2)}\n              </Typography>\n            </Box>\n          </Box>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Tooltip placement=\"top-start\" title=\"Science development card\">\n              <Box flex=\"1\">\n                <Typography variant=\"caption\">Printer</Typography>\n                <Typography variant=\"subtitle2\">\n                  {(playerAverages.extra.victoryScience * 100).toFixed(2)}%\n                </Typography>\n              </Box>\n            </Tooltip>\n            <Box flex=\"1\" />\n            <Tooltip placement=\"top-start\" title=\"Politics development card\">\n              <Box flex=\"1\">\n                <Typography variant=\"caption\">Constitution</Typography>\n                <Typography variant=\"subtitle2\">\n                  {(playerAverages.extra.victoryPolitics * 100).toFixed(2)}%\n                </Typography>\n              </Box>\n            </Tooltip>\n          </Box>\n        </Box>\n      </CardContent>\n      {/* <div>Win stats</div>\n      <div>Trade: {playerAverages.winStats.development.trade}</div>\n      <div>Politics: {playerAverages.winStats.development.politics}</div>\n      <div>Science: {playerAverages.winStats.development.science}</div>\n      <br />\n      <div>Cities: {playerAverages.winStats.base.cities}</div>\n      <div>Settlements: {playerAverages.winStats.base.settlements}</div>\n      <br />\n      <div>\n        #{playerAverages.winStats.order?.order} -{\" \"}\n        {playerAverages.winStats.order?.wins}\n      </div> */}\n    </Card>\n  );\n}\n\nexport default PlayerProfile;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Card,\n  CardContent,\n  Tooltip,\n  Chip,\n  TextField,\n  Box,\n  Grid,\n  Paper,\n  Container,\n  FormControlLabel,\n  Switch,\n  colors,\n} from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faDice,\n  faLaugh,\n  faSmile,\n  faMeh,\n  faFrown,\n  faSadCry,\n  faClock,\n  faUsers,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { format, formatDistanceToNow } from \"date-fns\";\nimport {\n  DateRangePicker,\n  DateRange,\n  DateRangeDelimiter,\n} from \"@material-ui/pickers\";\nimport { ResponsiveLine } from \"@nivo/line\";\nimport { ResponsivePie } from \"@nivo/pie\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nimport { GameData, GamePlayerData } from \"./useCsvParser\";\nimport PlayerProfile from \"./PlayerProfile\";\n\nconst gameRecency = [\n  { maxTime: 1209600000, color: \"#0f9960\", icon: faLaugh },\n  { maxTime: 2592000000, color: \"#2d5f4a\", icon: faSmile },\n  { maxTime: 5184000000, color: \"inherit\", icon: faMeh },\n  { maxTime: 10368000000, color: \"#692626\", icon: faFrown },\n  { color: \"#b10101\", icon: faSadCry },\n];\n\nconst placeNames = [\"first\", \"second\", \"third\", \"fourth\"] as const;\n\nexport type PlayerData = {\n  name: string;\n  totalGames: number;\n  totalScore: number;\n  totalWins: number;\n  places: {\n    first: number;\n    second: number;\n    third: number;\n    fourth: number;\n  };\n  games: GameData[];\n};\n\nfunction playersWithOrder(\n  players: GamePlayerData[]\n): players is Array<GamePlayerData & { order: number }> {\n  return players[0].order !== undefined;\n}\n\ntype Ranks = {\n  first: number;\n  second: number;\n  third: number;\n  fourth: number;\n};\n\nfunction Data({ data }: { data: GameData[] }) {\n  const lastGame = data[data.length - 1];\n  const firstGame = data[0];\n\n  const lastGameDate = new Date(lastGame.date);\n  const firstGameDate = new Date(firstGame.date);\n\n  const timePastSinceLastGame = Date.now() - +lastGameDate;\n  const gameRecencyItem = gameRecency.find(\n    (stage) => !stage.maxTime || timePastSinceLastGame < stage.maxTime\n  );\n\n  const [displayRange, setDisplayRange] = useState<DateRange<Date>>([\n    firstGameDate,\n    lastGameDate,\n  ]);\n  const allPlayers = [\n    ...new Set(data.flatMap((game) => game.players.map(({ name }) => name))),\n  ];\n\n  const [blacklistedPlayers, setBlacklistedPlayers] = useState<string[]>([]);\n  const [requiredGameStats, setRequiredGameStats] = useState<\n    Array<\"order\" | \"point-details\">\n  >([]);\n\n  const dateFilteredGames = data.filter(\n    ({ date }) =>\n      displayRange[0] &&\n      displayRange[1] &&\n      displayRange[0] <= new Date(date) &&\n      displayRange[1] >= new Date(date)\n  );\n\n  const playerFilteredGames = dateFilteredGames.filter(\n    ({ players }) =>\n      !players.some(({ name }) => blacklistedPlayers.includes(name))\n  );\n\n  const gamesMissingStats = playerFilteredGames\n    .filter(({ players: [{ base, development, extraPoints, order }] }) =>\n      [base, development, extraPoints, order].includes(undefined)\n    )\n    .map(({ gameNo, players: [{ base, development, extraPoints, order }] }) => {\n      const missingFields = [];\n\n      if (!base) missingFields.push(\"base\");\n      if (!development) missingFields.push(\"development\");\n      if (!extraPoints) missingFields.push(\"extraPoints\");\n      if (order === undefined) missingFields.push(\"order\");\n\n      return {\n        gameNo,\n        missingFields,\n      };\n    });\n\n  const filteredGames = !requiredGameStats.length\n    ? playerFilteredGames\n    : playerFilteredGames.filter(\n        (game) =>\n          !gamesMissingStats.find(({ gameNo, missingFields }) => {\n            if (gameNo !== game.gameNo) return false;\n\n            if (\n              requiredGameStats.includes(\"order\") &&\n              missingFields.includes(\"order\")\n            )\n              return true;\n\n            if (\n              requiredGameStats.includes(\"point-details\") &&\n              missingFields.some((field) => field !== \"order\")\n            )\n              return true;\n\n            return false;\n          })\n      );\n\n  const shownGamesMissingStats = gamesMissingStats.filter(({ gameNo }) =>\n    filteredGames.find((game) => game.gameNo === gameNo)\n  );\n\n  const dateAvailablePlayers = [\n    ...new Set(\n      dateFilteredGames.flatMap((game) => game.players.map(({ name }) => name))\n    ),\n  ];\n  const players = filteredGames.reduce(\n    (acc: Record<string, PlayerData>, game) => {\n      game.players.forEach((player, index) => {\n        const place = index + 1;\n        const playerData = acc[player.name] || {\n          name: player.name,\n          totalGames: 0,\n          totalScore: 0,\n          totalWins: 0,\n          places: {\n            first: 0,\n            second: 0,\n            third: 0,\n            fourth: 0,\n          },\n          games: [],\n        };\n        playerData.totalScore += player.score;\n        playerData.totalGames++;\n        playerData.totalWins += place === 1 ? 1 : 0;\n        playerData.games.push(game);\n\n        const placeName = placeNames[index];\n        playerData.places[placeName] += 1;\n\n        acc[player.name] = playerData;\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  useEffect(() => {\n    const minGames = data.length * 0.2;\n    const playersBelowMinGameCount = Object.values(players)\n      .filter(({ totalGames }) => totalGames < minGames)\n      .map(({ name }) => name);\n\n    if (playersBelowMinGameCount)\n      setBlacklistedPlayers(playersBelowMinGameCount);\n  }, []);\n\n  const victoriesByOrder = filteredGames.reduce(\n    (\n      acc: Partial<\n        Record<\n          typeof placeNames[number],\n          Partial<Record<typeof placeNames[number], number>>\n        >\n      >,\n      { players }\n    ) => {\n      if (!playersWithOrder(players)) return acc;\n\n      const order = players.map(({ order }) => order);\n      order.forEach((order, index) => {\n        const orderPositionName = placeNames[order - 1];\n        const position = placeNames[index];\n        const orderPositions = acc[orderPositionName] || {};\n\n        orderPositions[position] = (orderPositions[position] || 0) + 1;\n        acc[orderPositionName] = orderPositions;\n      });\n\n      return acc;\n    },\n    {}\n  );\n\n  return (\n    <Container>\n      <Box my={4}>\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <Card elevation={2}>\n              <CardContent>\n                <Typography variant=\"h4\">\n                  <FontAwesomeIcon icon={faDice} />\n                  &nbsp;Total games\n                </Typography>\n                <Typography variant=\"h3\">{data.length}</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {gameRecencyItem && (\n            <Grid item xs>\n              <Card elevation={2}>\n                <CardContent>\n                  <Typography variant=\"h4\">\n                    <FontAwesomeIcon icon={faClock} />\n                    &nbsp;Last played\n                  </Typography>\n                  <Typography variant=\"h3\">\n                    <Tooltip\n                      title={format(lastGameDate, \"do MMMM yyyy\")}\n                      placement=\"top\"\n                    >\n                      <span style={{ color: gameRecencyItem.color }}>\n                        {formatDistanceToNow(lastGameDate, { addSuffix: true })}\n                        &nbsp;\n                        <FontAwesomeIcon icon={gameRecencyItem.icon} />\n                      </span>\n                    </Tooltip>\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          )}\n\n          <Grid item xs>\n            <Card elevation={2}>\n              <CardContent>\n                <Typography variant=\"h4\">\n                  <FontAwesomeIcon icon={faUsers} />\n                  &nbsp;Total players\n                </Typography>\n                <Typography variant=\"h3\">{allPlayers.length}</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box\n        py={2}\n        px={2}\n        mx={-2}\n        position=\"sticky\"\n        top={0}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        zIndex={1}\n        style={{ backgroundColor: \"white\" }}\n      >\n        <Box>\n          <DateRangePicker\n            startText=\"Start date\"\n            endText=\"End date\"\n            label={null}\n            value={displayRange}\n            disableFuture\n            disableHighlightToday\n            reduceAnimations\n            minDate={firstGameDate}\n            maxDate={lastGameDate}\n            onChange={setDisplayRange}\n            renderInput={(startProps, endProps) => (\n              <React.Fragment>\n                <TextField {...startProps} size=\"small\" helperText={null} />\n                <DateRangeDelimiter> to </DateRangeDelimiter>\n                <TextField {...endProps} size=\"small\" helperText={null} />\n              </React.Fragment>\n            )}\n          />\n        </Box>\n        {!!gamesMissingStats.length && (\n          <Box display=\"flex\" flex=\"1\" px={2} alignItems=\"center\">\n            <Box>\n              <FormControlLabel\n                control={\n                  <Switch\n                    size=\"small\"\n                    checked={!requiredGameStats.includes(\"order\")}\n                    onChange={() =>\n                      setRequiredGameStats((requiredStats) =>\n                        requiredStats.includes(\"order\")\n                          ? requiredStats.filter((stat) => stat !== \"order\")\n                          : [...requiredStats, \"order\"]\n                      )\n                    }\n                    color=\"primary\"\n                  />\n                }\n                label=\"Games missing start order\"\n              />\n              <FormControlLabel\n                control={\n                  <Switch\n                    size=\"small\"\n                    checked={!requiredGameStats.includes(\"point-details\")}\n                    onChange={() =>\n                      setRequiredGameStats((requiredStats) =>\n                        requiredStats.includes(\"point-details\")\n                          ? requiredStats.filter(\n                              (stat) => stat !== \"point-details\"\n                            )\n                          : [...requiredStats, \"point-details\"]\n                      )\n                    }\n                    color=\"primary\"\n                  />\n                }\n                label=\"Games missing point details\"\n              />\n            </Box>\n            <Tooltip\n              title={shownGamesMissingStats.map(({ gameNo, missingFields }) => {\n                return (\n                  <Box>\n                    Game #{gameNo} is missing - {missingFields.join(\", \")} data\n                  </Box>\n                );\n              })}\n              placement=\"top\"\n            >\n              <Box\n                pl={3}\n                component=\"span\"\n                visibility={\n                  !!shownGamesMissingStats.length ? \"visible\" : \"hidden\"\n                }\n              >\n                <FontAwesomeIcon\n                  icon={faExclamationTriangle}\n                  size=\"lg\"\n                  color={colors.deepOrange[500]}\n                />\n              </Box>\n            </Tooltip>\n          </Box>\n        )}\n        <Box>\n          {dateAvailablePlayers.map((name) => {\n            const isBlacklisted = blacklistedPlayers.includes(name);\n\n            return (\n              <Chip\n                style={{ margin: 2 }}\n                key={name}\n                label={name}\n                variant={isBlacklisted ? \"outlined\" : undefined}\n                color={isBlacklisted ? undefined : \"primary\"}\n                onClick={() =>\n                  setBlacklistedPlayers(\n                    isBlacklisted\n                      ? blacklistedPlayers.filter((player) => player !== name)\n                      : [...blacklistedPlayers, name]\n                  )\n                }\n              />\n            );\n          })}\n        </Box>\n      </Box>\n      <Box my={4}>\n        <Box mb={2}>\n          <Typography variant=\"h4\">Shown player data</Typography>\n        </Box>\n        <Grid container spacing={3}>\n          {Object.values(players).map((player) => (\n            <Grid item sm={4}>\n              <PlayerProfile\n                key={player.name}\n                player={player}\n                playerGames={player.games}\n              />\n            </Grid>\n          ))}\n        </Grid>\n        {/* <PlayerProfile playerGames={filteredGames} /> */}\n      </Box>\n      <Box mt={4}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} style={{ maxHeight: \"80vh\", height: 500 }}>\n            <Typography variant=\"h4\">1st place percentage over time</Typography>\n            <ResponsiveLine\n              data={Object.values(players).map((player) => {\n                const playerGames = filteredGames.filter((game) =>\n                  game.players.some(({ name }) => name === player.name)\n                );\n\n                return {\n                  id: player.name,\n                  data: playerGames.reduce(\n                    (acc: { x: string; y: number }[], game, i) => {\n                      const playerPosition = game.players.findIndex(\n                        ({ name }) => name === player.name\n                      );\n                      const hasWon = playerPosition === 0;\n                      const previousAvg = acc[acc.length - 1]?.y || 0;\n                      const newAvg =\n                        (previousAvg * acc.length + +hasWon) / (i + 1);\n\n                      acc.push({\n                        x: game.gameNo,\n                        y: newAvg,\n                      });\n                      return acc;\n                    },\n                    []\n                  ),\n                };\n              })}\n              margin={{ top: 50, right: 60, bottom: 120, left: 60 }}\n              colors={{ scheme: \"category10\" }}\n              curve=\"natural\"\n              axisTop={null}\n              axisRight={null}\n              axisBottom={{\n                orient: \"bottom\",\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: \"Game\",\n                legendOffset: 40,\n                legendPosition: \"middle\",\n              }}\n              lineWidth={4}\n              pointSize={12}\n              pointBorderWidth={2}\n              useMesh\n              enableCrosshair={false}\n              yFormat={(value) => `${Math.round(+value * 10000) / 100}%`}\n              tooltip={(item) => {\n                // Read from formatted data\n                const gameData = data.find(\n                  ({ gameNo }) => gameNo === String(item.point.data.x)\n                );\n                if (!gameData) return <div>Missing game data</div>;\n\n                return (\n                  <Paper>\n                    <Box p={1} alignContent=\"left\">\n                      <div>{gameData.date}</div>\n                      {gameData.players.map((player) => (\n                        <div>\n                          {player.name}: {player.score}\n                        </div>\n                      ))}\n                    </Box>\n                  </Paper>\n                );\n              }}\n              legends={[\n                {\n                  anchor: \"bottom\",\n                  direction: \"row\",\n                  translateY: 80,\n                  itemWidth: 100,\n                  itemHeight: 18,\n                  itemTextColor: \"#999\",\n                  symbolSize: 18,\n                  symbolShape: \"circle\",\n                  effects: [\n                    {\n                      on: \"hover\",\n                      style: {\n                        itemTextColor: \"#000\",\n                      },\n                    },\n                  ],\n                },\n              ]}\n            />\n          </Grid>\n          <Grid item xs={6} style={{ height: 300 }}>\n            <Typography variant=\"h4\">1st place percentage</Typography>\n            <ResponsivePie\n              data={Object.values(players).map((player) => ({\n                id: player.name,\n                label: player.name,\n                value: player.totalWins / player.totalGames,\n              }))}\n              sliceLabel={({ value }) => `${Math.round(value * 10000) / 100}%`}\n              colors={{ scheme: \"category10\" }}\n              innerRadius={0.4}\n              padAngle={2}\n              radialLabelsLinkColor={{ from: \"color\", modifiers: [] }}\n              radialLabelsLinkStrokeWidth={4}\n              radialLabelsLinkOffset={4}\n              slicesLabelsSkipAngle={2}\n              radialLabelsSkipAngle={1}\n              margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\n              tooltip={(slice) => (\n                <>\n                  <p>Games played: {players[slice.id].totalGames}</p>\n                  <p>Total wins: {players[slice.id].totalWins}</p>\n                </>\n              )}\n              legends={[\n                {\n                  anchor: \"bottom\",\n                  direction: \"row\",\n                  translateY: 56,\n                  itemWidth: 100,\n                  itemHeight: 18,\n                  itemTextColor: \"#999\",\n                  symbolSize: 18,\n                  symbolShape: \"circle\",\n                  effects: [\n                    {\n                      on: \"hover\",\n                      style: {\n                        itemTextColor: \"#000\",\n                      },\n                    },\n                  ],\n                },\n              ]}\n            />\n          </Grid>\n          <Grid item xs={6} style={{ height: 300 }}>\n            <Typography variant=\"h4\">Place percentage</Typography>\n            <ResponsiveBar\n              data={Object.values(players).map(\n                ({ name, places, totalGames }) => ({\n                  name,\n                  first: places.first / totalGames,\n                  second: places.second / totalGames,\n                  third: places.third / totalGames,\n                  fourth: places.fourth / totalGames,\n                })\n              )}\n              label={({ value }) => {\n                if (typeof value !== \"number\") return \"\";\n\n                return `${Math.round(value * 10000) / 100}%`;\n              }}\n              keys={placeNames as any}\n              indexBy=\"name\"\n              margin={{ top: 10, right: 60, bottom: 80, left: 60 }}\n              colors={{ scheme: \"category10\" }}\n              legends={[\n                {\n                  dataFrom: \"keys\",\n                  anchor: \"bottom\",\n                  direction: \"row\",\n                  justify: false,\n                  translateY: 60,\n                  itemsSpacing: 2,\n                  itemWidth: 100,\n                  itemHeight: 20,\n                  itemDirection: \"left-to-right\",\n                  itemOpacity: 0.85,\n                  symbolSize: 20,\n                  effects: [\n                    {\n                      on: \"hover\",\n                      style: {\n                        itemOpacity: 1,\n                      },\n                    },\n                  ],\n                },\n              ]}\n              animate={true}\n              motionStiffness={90}\n              motionDamping={15}\n            />\n          </Grid>\n\n          <Grid item xs={12} style={{ maxHeight: \"80vh\", height: 500 }}>\n            <Typography variant=\"h4\">Average score over time</Typography>\n            <ResponsiveLine\n              data={Object.values(players).map((player) => {\n                const playerGames = filteredGames.filter((game) =>\n                  game.players.some(({ name }) => name === player.name)\n                );\n\n                return {\n                  id: player.name,\n                  data: playerGames.reduce(\n                    (acc: { x: string; y: number }[], game, i) => {\n                      const playerScore =\n                        game.players.find(({ name }) => name === player.name)\n                          ?.score || 0;\n                      const previousAvg = acc[acc.length - 1]?.y || 0;\n                      const newAvg =\n                        (previousAvg * acc.length + playerScore) / (i + 1);\n\n                      acc.push({\n                        x: game.gameNo,\n                        y: newAvg,\n                      });\n                      return acc;\n                    },\n                    []\n                  ),\n                };\n              })}\n              margin={{ top: 50, right: 60, bottom: 120, left: 60 }}\n              colors={{ scheme: \"category10\" }}\n              curve=\"natural\"\n              axisTop={null}\n              axisRight={null}\n              axisBottom={{\n                orient: \"bottom\",\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: \"Game\",\n                legendOffset: 40,\n                legendPosition: \"middle\",\n              }}\n              lineWidth={4}\n              pointSize={12}\n              pointBorderWidth={2}\n              useMesh\n              enableCrosshair={false}\n              yScale={{\n                type: \"linear\",\n                max: \"auto\",\n                min: \"auto\",\n              }}\n              legends={[\n                {\n                  anchor: \"bottom\",\n                  direction: \"row\",\n                  translateY: 80,\n                  itemWidth: 100,\n                  itemHeight: 18,\n                  itemTextColor: \"#999\",\n                  symbolSize: 18,\n                  symbolShape: \"circle\",\n                  effects: [\n                    {\n                      on: \"hover\",\n                      style: {\n                        itemTextColor: \"#000\",\n                      },\n                    },\n                  ],\n                },\n              ]}\n            />\n          </Grid>\n        </Grid>\n\n        {/* <Grid item xs={6} style={{ height: 300 }}>\n          <Typography variant=\"h4\">Order victory percentage</Typography>\n          <ResponsiveBar\n            data={Object.values(victoriesByOrder).map((ranks, index) => {\n              const totalGames = Object.values(ranks).reduce(\n                (acc, gameCount) => acc + gameCount\n              );\n              return {\n                name: placeNames[index],\n                first: places.first / totalGames,\n                second: places.second / totalGames,\n                third: places.third / totalGames,\n                fourth: places.fourth / totalGames,\n              };\n            })}\n            label={({ value }) => {\n              if (typeof value !== \"number\") return \"\";\n\n              return `${Math.round(value * 10000) / 100}%`;\n            }}\n            keys={placeNames as any}\n            indexBy=\"name\"\n            margin={{ top: 10, right: 60, bottom: 80, left: 60 }}\n            colors={{ scheme: \"category10\" }}\n            legends={[\n              {\n                dataFrom: \"keys\",\n                anchor: \"bottom\",\n                direction: \"row\",\n                justify: false,\n                translateY: 60,\n                itemsSpacing: 2,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemDirection: \"left-to-right\",\n                itemOpacity: 0.85,\n                symbolSize: 20,\n                effects: [\n                  {\n                    on: \"hover\",\n                    style: {\n                      itemOpacity: 1,\n                    },\n                  },\n                ],\n              },\n            ]}\n            animate={true}\n            motionStiffness={90}\n            motionDamping={15}\n          />\n        </Grid> */}\n      </Box>\n    </Container>\n  );\n}\n\nexport default Data;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { useCsvParser } from \"./useCsvParser\";\nimport { useLocationUpdater } from \"./useLocationUpdater\";\nimport {\n  Typography,\n  TextField,\n  InputAdornment,\n  CircularProgress,\n  Box,\n} from \"@material-ui/core\";\nimport Data from \"./Data\";\n\nfunction App() {\n  const searchParams = new URLSearchParams(window.location.search.slice(1));\n  const fileQuery = searchParams.get(\"file\");\n\n  const [fileUrl, setFileUrl] = useState(fileQuery || \"\");\n\n  console.time(\"parse\");\n  const { data, isLoading, error } = useCsvParser(fileUrl);\n  console.timeEnd(\"parse\");\n  console.error(\"pppp\", data);\n  useLocationUpdater(fileUrl);\n\n  return (\n    <Box pt={4}>\n      <Box\n        textAlign=\"center\"\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n      >\n        <Typography variant=\"h1\">Catan stats</Typography>\n        {!data && (\n          <Typography variant=\"h2\">👋 gimme something to visualize</Typography>\n        )}\n        <Box maxWidth={600} width=\"100%\" pt={2}>\n          <TextField\n            value={fileUrl}\n            label={error ? error?.toString() : \"CSV or JSON URL\"}\n            variant=\"outlined\"\n            fullWidth\n            error={!!error}\n            onChange={(event) => setFileUrl(event.target.value)}\n            InputProps={{\n              endAdornment: isLoading && (\n                <InputAdornment position=\"end\">\n                  <CircularProgress size={24} />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </Box>\n      </Box>\n      {data && <Data data={data} />}\n    </Box>\n  );\n}\n\nexport default App;\n","import { useEffect } from \"react\";\n\nexport const useLocationUpdater = (fileUrl: string) =>\n  useEffect(() => {\n    const url = new URL(window.location.href);\n\n    if (!fileUrl) {\n      url.searchParams.delete(\"file\");\n    } else {\n      url.searchParams.set(\"file\", fileUrl);\n    }\n\n    window.history.replaceState({}, \"\", url.href);\n  }, [fileUrl]);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { LocalizationProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@material-ui/pickers/adapter/date-fns\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <LocalizationProvider dateAdapter={DateFnsUtils}>\n      <App />\n    </LocalizationProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}